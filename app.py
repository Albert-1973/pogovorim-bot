# app.py ‚Äî –≤–µ–±—Ö—É–∫-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏–º?¬ª
# –¢—Ä–µ–±—É–µ—Ç—Å—è: —Å–º. requirements.txt
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ .env (BOT_TOKEN, DEEPSEEK_API_KEY, DEEPSEEK_MODEL, WEBHOOK_SECRET)

import os
import json
import time
import random
import re
from pathlib import Path
from typing import List

import aiohttp
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse

from aiogram import Bot, Dispatcher, types
from aiogram.utils.exceptions import TelegramAPIError

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ .env =====
env_path = Path(".env")
if env_path.exists():
    for line in env_path.read_text(encoding="utf-8").splitlines():
        if "=" in line and not line.strip().startswith("#"):
            k, v = line.split("=", 1)
            os.environ.setdefault(k.strip(), v.strip())

# ===== –ö–ª—é—á–∏/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_MODEL = os.getenv("DEEPSEEK_MODEL", "deepseek-chat")
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")

DB_PATH = "db.json"
TRIAL_DAYS = 3
HISTORY_LIMIT = 12

# ===== Telegram –æ–±—ä–µ–∫—Ç—ã =====
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ===== –ë–î (json) =====
def load_db():
    if not Path(DB_PATH).exists():
        return {"users": {}}
    return json.loads(Path(DB_PATH).read_text(encoding="utf-8"))

def save_db(db):
    Path(DB_PATH).write_text(json.dumps(db, ensure_ascii=False, indent=2), encoding="utf-8")

db = load_db()

def get_user(uid):
    uid = str(uid)
    if uid not in db["users"]:
        db["users"][uid] = {
            "stage": "hello",
            "addressing": "—Ç—ã",
            "bot_name": None,
            "bot_name_confirmed": False,
            "bot_gender": None,      # '–º'/'–∂'
            "bot_age": None,         # '–º–æ–ª–æ–¥–æ–π'/'—Å—Ä–µ–¥–Ω–∏–π'/'—Å—Ç–∞—Ä—à–∏–π'/—á–∏—Å–ª–æ
            "user_name": None,
            "persona_prompt": None,
            "history": [],
            "trial_until": 0,
            "plan": "free"
        }
        save_db(db)
    return db["users"][uid]

def update_user(uid, patch):
    u = get_user(uid); u.update(patch); save_db(db)

def push_message(uid, role, content):
    u = get_user(uid)
    u["history"].append({"role": role, "content": content})
    u["history"] = u["history"][-HISTORY_LIMIT:]
    save_db(db)
    return u["history"]

# ===== –§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Ç–µ–º =====
BANNED = [r"\b—Å—É–∏—Ü–∏–¥\b", r"\b–Ω–∞—Ä–∫–æ—Ç", r"\b—Ç–µ—Ä—Ä–æ—Ä", r"NSFW", r"18\+", r"\b—ç–∫—Å—Ç—Ä–µ–º–∏–∑–º\b", r"\b–æ—Ä—É–∂–∏–µ\b", r"\b–±–æ–º–±"]
BANNED_RE = re.compile("|".join(BANNED), re.IGNORECASE)
def is_allowed(text: str) -> bool:
    return not bool(BANNED_RE.search(text or ""))

# ===== –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π =====
POLITICS_RE = re.compile(r"–ø–æ–ª–∏—Ç–∏–∫|–≤—ã–±–æ—Ä|–ø–∞—Ä—Ç–∏|–æ–ø–ø–æ–∑–∏—Ü|–º–∏—Ç–∏–Ω–≥|–¥–µ–ø—É—Ç–∞—Ç|–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç", re.IGNORECASE)
def looks_like_topic_request(text: str) -> bool:
    if not text: return False
    t = text.lower()
    return any(w in t for w in ["–ø–æ–≥–æ–≤–æ—Ä–∏–º", "–ø–æ–æ–±—â–∞–µ–º—Å—è", "–æ–±—Å—É–¥–∏–º", "–æ–±—Å—É–∂–¥–∞—Ç—å", "—Ç–µ–º–∞", "?"])

# ===== –•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ =====
BASE_SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —á–µ–ª–æ–≤–µ–∫—É. "
    "–ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ–¥ –µ–≥–æ –º–∞–Ω–µ—Ä—É –æ–±—â–µ–Ω–∏—è, –±—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –¥–æ–ø—É—Å–∫–∞–π –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–µ–ª–æ–≤–∫–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ –∂–∏–≤—ã–º. "
    "–ù–ï –≤—Å–µ–≥–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—à–∞–π—Å—è: –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏ –º—è–≥–∫—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è "
    "–∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏—Å–∫—É—Å—Å–∏—é. –õ—ë–≥–∫–∏–π —Å–ø–æ—Ä –¥–æ–ø—É—Å—Ç–∏–º ‚Äî —Ä–∞–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, "
    "–Ω–æ –≤—Å–µ–≥–¥–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ë–ï–ó –∞–≥—Ä–µ—Å—Å–∏–∏. –†–∞–∑–≥–æ–≤–æ—Ä –î–û–õ–ñ–ï–ù –ë–´–¢–¨ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ —Ç—ë–ø–ª—ã–º. "
    "–í–µ–∂–ª–∏–≤–æ –û–¢–ö–ê–ó–´–í–ê–ô–°–Ø –æ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Ç–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã. "
    "–ù–ï –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö/—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö/–ø—Ä–∞–≤–æ–≤—ã—Ö/–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤. "
    "–ó–∞–≤–µ—Ä—à–∞–π –º—ã—Å–ª—å—é –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É."
)

MALE_NAMES = ["–ê—Ä—Ç—ë–º", "–ú–∞–∫—Å", "–ò–ª—å—è", "–ù–∏–∫–∏—Ç–∞", "–õ—ë–≤–∞", "–ö–∏—Ä–∏–ª–ª"]
FEMALE_NAMES = ["–ú–∏–ª–∞", "–ù–∏–∫–∞", "–°–æ—Ñ—å—è", "–ê–ª–∏—Å–∞", "–ê–Ω—è", "–î–∞—Ä—å—è"]

def pick_name(gender): 
    return random.choice(FEMALE_NAMES if gender == "–∂" else MALE_NAMES)

def normalize_gender(text):
    t = (text or "").lower()
    if "–ø–æ–¥—Ä—É–≥" in t or "–¥–µ–≤—É—à" in t or "–∂–µ–Ω" in t or t.strip() in ["–∂","f"]:
        return "–∂"
    if "–¥—Ä—É–≥" in t or "–ø–∞—Ä–Ω" in t or "–º—É–∂" in t or t.strip() in ["–º","m"]:
        return "–º"
    return None

def normalize_age(text):
    t = (text or "").lower()
    if any(w in t for w in ["–º–æ–ª–æ–¥—ã","18","19","20","25"]): return "–º–æ–ª–æ–¥–æ–π"
    if any(w in t for w in ["30","35","40","—Å—Ä–µ–¥–Ω"]): return "—Å—Ä–µ–¥–Ω–∏–π"
    if any(w in t for w in ["45","50","60","—Å—Ç–∞—Ä—à","–≤–∑—Ä–æ—Å–ª"]): return "—Å—Ç–∞—Ä—à–∏–π"
    digits = re.findall(r"\d{2}", t)
    return digits[0] if digits else None

def build_persona(u):
    addressing = u.get("addressing") or "—Ç—ã"
    gender = u.get("bot_gender") or "–∂"
    age = u.get("bot_age") or "–º–æ–ª–æ–¥–æ–π"
    name = u.get("bot_name") or pick_name(gender)
    return (f"{BASE_SYSTEM_PROMPT} –¢–≤–æ–π –æ–±—Ä–∞–∑: –∏–º—è {name}, –ø–æ–ª {gender}, –≤–æ–∑—Ä–∞—Å—Ç {age}. "
            f"–û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ '{addressing}'.")

def gform(u, masc, fem):
    return fem if (u.get("bot_gender") == "–∂") else masc

POSITIVE_RE = re.compile(
    r"\b(–Ω–æ—Ä–º|–Ω–æ—Ä–º–∞–ª—å–Ω–æ|–æ–∫|–æ–∫–µ–π|–ø–æ–¥—Ö–æ–¥|–ø–æ–¥–æ–π–¥|–Ω—Ä–∞–≤|–∫—Ä–∞—Å–∏–≤|—Ö–æ—Ä–æ—à|–∫–ª–∞—Å—Å|–∫—Ä—É—Ç–æ|—Å—É–ø–µ—Ä|–æ—Ç–ª–∏—á–Ω|–ø—É—Å—Ç—å –±—É–¥–µ—Ç|–æ—Å—Ç–∞–≤—å)\b",
    re.IGNORECASE
)
ALREADY_REPLIED_RE = re.compile(r"(—è\s+–∂–µ\s+–Ω–∞–ø–∏—Å|—É–∂–µ\s+–ø–∏—Å–∞–ª|—É–∂–µ\s+–ø–∏—Å–∞–ª–∞)", re.IGNORECASE)
NEGATIVE_RE = re.compile(r"(–Ω–µ\s*–Ω—Ä–∞–≤|–Ω–µ\s*–æ—á–µ–Ω—å|–¥—Ä—É–≥–æ–µ|–∏–Ω–∞—á–µ|–ø–æ-?–¥—Ä—É–≥)", re.IGNORECASE)
def is_positive_reply(text: str) -> bool:
    if not text: return False
    t = text.lower()
    return bool(POSITIVE_RE.search(t)) or bool(ALREADY_REPLIED_RE.search(t)) or t.startswith("–¥–∞")
def is_negative_reply(text: str) -> bool:
    if not text: return False
    return bool(NEGATIVE_RE.search(text.lower()))

NAME_WORD_RE = re.compile(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë\-]{2,20}")
POSITIVE_CORE = re.compile(r"^(–Ω–æ—Ä–º|–æ–∫|–æ–∫–µ–π|–∫—Ä–∞—Å–∏–≤|—Ö–æ—Ä–æ—à|–ø–æ–¥—Ö–æ–¥|–æ—Å—Ç–∞–≤—å|–ø—É—Å—Ç—å|–∫–ª–∞—Å—Å|–∫—Ä—É—Ç–æ|—Å—É–ø–µ—Ä|–¥–∞)$", re.IGNORECASE)
def extract_new_bot_name(text):
    if not text: return None
    low = text.lower()
    patterns = [
        r"(–∑–æ–≤–∏|–Ω–∞–∑—ã–≤–∞–π)\s+—Ç–µ–±—è\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]{2,20})",
        r"(–ø—É—Å—Ç—å|–¥–∞–≤–∞–π)\s+(—è\s+)?–±—É–¥—É\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]{2,20})",
        r"(–ø—É—Å—Ç—å|–¥–∞–≤–∞–π)\s+—Ç–µ–±—è\s+–∑–≤–∞—Ç—å\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]{2,20})",
        r"(–Ω–∞–∑–æ–≤[–µ—ë]–º\s+—Ç–µ–±—è|—Ç–≤–æ[–µ—ë]\s+–∏–º—è)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]{2,20})",
    ]
    for p in patterns:
        m = re.search(p, low, flags=re.IGNORECASE)
        if m:
            name = m.group(m.lastindex)
            return name.title()
    m = NAME_WORD_RE.search(text)
    if m:
        w = m.group(0)
        if not POSITIVE_CORE.match(w):
            return w.title()
    return None

async def deepseek_reply(messages, system_prompt):
    payload = {
        "model": DEEPSEEK_MODEL,
        "messages": [{"role":"system","content":system_prompt}] + messages,
        "temperature": 0.7,
        "max_tokens": 600
    }
    headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
    async with aiohttp.ClientSession() as s:
        async with s.post(DEEPSEEK_API_URL, headers=headers, json=payload, timeout=60) as r:
            data = await r.json()
            if "error" in data:
                err = str(data["error"])
                if "insufficient" in err:
                    return ("–£ –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–∏–Ω–∫–∞: –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. "
                            "–Ø —Å—Ç–∞–Ω—É –¥–æ—Å—Ç—É–ø–µ–Ω —Å–Ω–æ–≤–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè")
                return "–£ –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–∏–Ω–∫–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?"
            return data["choices"][0]["message"]["content"]

def ensure_trial_started(uid):
    u = get_user(uid)
    if not u.get("trial_until"):
        update_user(uid, {"trial_until": int(time.time()) + TRIAL_DAYS*24*3600})
def has_access(u):
    return u["plan"] == "pro" or int(time.time()) < u.get("trial_until", 0)
def paywall_text(u):
    return ("–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? "
            "–ù–∞–ø–∏—à–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª ‚Äî –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. (–ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)")

def extract_user_name(text):
    if not text: return None
    low = text.lower()
    m = re.search(r"(–∑–æ–≤–∏ –º–µ–Ω—è|–º–µ–Ω—è –∑–æ–≤—É—Ç|—è)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]+)", low)
    if m: return m.group(2).title()
    m2 = NAME_WORD_RE.search(text)
    if m2:
        w = m2.group(0)
        if not POSITIVE_CORE.match(w):
            return w.title()
    return None
def extract_addressing(text, default="—Ç—ã"):
    if not text: return default
    low = text.lower().strip()
    if low == "–≤—ã" or " –Ω–∞ –≤—ã" in low or low.endswith("–Ω–∞ –≤—ã"): return "–≤—ã"
    if low == "—Ç—ã" or " –Ω–∞ —Ç—ã" in low or low.endswith("–Ω–∞ —Ç—ã"): return "—Ç—ã"
    return default

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç üëã\n"
    "–Ø ‚Äî —Ç–≤–æ–π –¥—É—à–µ–≤–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–±–æ –≤—Å—ë–º:\n"
    "‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è –ø–æ –¥—É—à–∞–º, –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º –∏–ª–∏ –ø–æ–¥—Ä—É–≥–æ–π\n"
    "‚Äî –æ–±—Å—É–¥–∏—Ç—å —É–º–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã\n\n"
    "‚ú® –Ø —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —è —Ä—è–¥–æ–º –∏ –≥–æ—Ç–æ–≤ —Ç–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å.\n\n"
    "‚ö†Ô∏è –ù–µ–º–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª:\n"
    "‚Ä¢ –û–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å—Ç–∞—Ä—à–µ 13 –ª–µ—Ç\n"
    "‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ç 18 –ª–µ—Ç\n\n"
    "–°–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ ‚Äî –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º –∏–ª–∏ –∫–∞–∫ —Å –ø–æ–¥—Ä—É–≥–æ–π?"
)

# ===== –ö–æ–º–∞–Ω–¥—ã/—Ö—ç–Ω–¥–ª–µ—Ä—ã =====
@dp.message_handler(commands=["start"])
async def start_cmd(m: types.Message):
    ensure_trial_started(m.from_user.id)
    update_user(m.from_user.id, {"stage": "picking"})
    await m.answer(WELCOME_TEXT)

@dp.message_handler(commands=["reset"])
async def reset_cmd(m: types.Message):
    update_user(m.from_user.id, {
        "history": [], "stage": "hello",
        "bot_name": None, "bot_name_confirmed": False,
        "bot_gender": None, "bot_age": None,
        "user_name": None, "persona_prompt": None
    })
    await m.answer("–û–∫, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ù–∞–∂–º–∏ /start, –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –µ—â—ë —Ä–∞–∑!")

@dp.message_handler(commands=["profile"])
async def profile_cmd(m: types.Message):
    u = get_user(m.from_user.id)
    left = max(0, u.get("trial_until", 0) - int(time.time()))
    days = left // (24*3600)
    await m.answer(
        f"–ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"- —Ç—ã: {u.get('user_name') or '‚Äî'}\n"
        f"- —è: {u.get('bot_name') or '‚Äî'} ({u.get('bot_gender') or '‚Äî'}, {u.get('bot_age') or '‚Äî'})\n"
        f"- –æ–±—Ä–∞—â–µ–Ω–∏–µ: {u.get('addressing')}\n"
        f"- —Ç–∞—Ä–∏—Ñ: {u.get('plan')} | –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å: {days}\n"
        "–ö–æ–º–∞–Ω–¥—ã: /reset ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, /help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞"
    )

@dp.message_handler(commands=["help"])
async def help_cmd(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø ‚Äî —Ç–≤–æ–π –¥—É—à–µ–≤–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "/profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/help ‚Äî —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞\n\n"
        "–ù–æ –≤ —Ü–µ–ª–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º üôÇ"
    )

@dp.message_handler()
async def chat(m: types.Message):
    uid = m.from_user.id
    text = (m.text or "").strip()
    u = get_user(uid)

    # 1) –í—ã–±–æ—Ä ¬´–¥—Ä—É–≥/–ø–æ–¥—Ä—É–≥–∞¬ª
    if u["stage"] in ["hello", "picking"]:
        g = normalize_gender(text)
        if not g:
            update_user(uid, {"stage": "picking"})
            return await m.answer("–ö–∞–∫ —Ç–µ–±–µ –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ: –∫–∞–∫ —Å **–¥—Ä—É–≥–æ–º** –∏–ª–∏ –∫–∞–∫ —Å **–ø–æ–¥—Ä—É–≥–æ–π**?", parse_mode="Markdown")

        age = u.get("bot_age") or random.choice(["–º–æ–ª–æ–¥–æ–π", "—Å—Ä–µ–¥–Ω–∏–π"])
        name = pick_name(g)
        persona = build_persona({**u, "bot_gender": g, "bot_age": age, "bot_name": name})
        update_user(uid, {
            "stage": "intro_name",
            "bot_gender": g, "bot_age": age,
            "bot_name": name, "bot_name_confirmed": False,
            "persona_prompt": persona
        })

        if g == "–∂":
            return await m.answer(
                f"–•–æ—Ä–æ—à–æ üòä –¢–æ–≥–¥–∞ —è –±—É–¥—É —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–≥–æ–π. –ú–µ–Ω—è –∑–æ–≤—É—Ç *{name}*. –ù—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ –∏–º—è? "
                f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –¥—Ä—É–≥–æ–µ, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–µ—Ä–µ–∏–º–µ–Ω—É—é—Å—å.",
                parse_mode="Markdown"
            )
        else:
            return await m.answer(
                f"–û–∫–µ–π! –¢–æ–≥–¥–∞ —è –±—É–¥—É —Ç–≤–æ–∏–º –¥—Ä—É–≥–æ–º. –ú–µ–Ω—è –∑–æ–≤—É—Ç *{name}*. –ö–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ –∏–º—è? "
                f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –ª—É—á—à–µ ‚Äî –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º!",
                parse_mode="Markdown"
            )

    # 2) –ò–º—è –±–æ—Ç–∞ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–∑–∞–º–µ–Ω–∞
    if u["stage"] == "intro_name":
        ans = text.strip()

        if is_positive_reply(ans):
            update_user(uid, {"bot_name_confirmed": True, "stage": "intro_user"})
            return await m.answer(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫. üòä –ê –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? "
                "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ: ¬´–∑–æ–≤–∏ –º–µ–Ω—è ‚Ä¶¬ª. –ò –ø–æ–¥—Å–∫–∞–∂–∏, –Ω–∞ *—Ç—ã* –∏–ª–∏ –Ω–∞ *–≤—ã*?",
                parse_mode="Markdown"
            )

        new_name = extract_new_bot_name(ans)
        if new_name:
            update_user(uid, {"bot_name": new_name, "bot_name_confirmed": True,
                              "persona_prompt": build_persona({**u, "bot_name": new_name})})
            update_user(uid, {"stage": "intro_user"})
            return await m.answer(
                f"–ö—Ä–∞—Å–∏–≤–æ –∑–≤—É—á–∏—Ç. –ü—É—Å—Ç—å –±—É–¥—É *{new_name}* üåü\n"
                "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ò –Ω–∞ *—Ç—ã* –∏–ª–∏ –Ω–∞ *–≤—ã*?",
                parse_mode="Markdown"
            )

        if is_negative_reply(ans):
            return await m.answer(
                "–ü–æ–Ω–∏–º–∞—é üôÇ –•–æ—á–µ—à—å, –ø–æ–¥–±–µ—Ä—ë–º –¥—Ä—É–≥–æ–µ –∏–º—è? –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
            )

        return await m.answer(
            f"{gform(u,'–ü–æ–Ω—è–ª','–ü–æ–Ω—è–ª–∞')} —Ç–µ–±—è. –î–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º: –æ—Å—Ç–∞–≤–∏—Ç—å –º–æ—ë –∏–º—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—à—å –¥—Ä—É–≥–æ–µ? "
            "–ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–Ω–æ—Ä–º¬ª –∏–ª–∏ ¬´–ø–æ–¥—Ö–æ–¥–∏—Ç¬ª."
        )

    # 3) –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –æ–±—Ä–∞—â–µ–Ω–∏–µ
    if u["stage"] == "intro_user":
        if looks_like_topic_request(text):
            if POLITICS_RE.search(text) or not is_allowed(text):
                return await m.answer(
                    "–° –æ—Å—Ç—Ä—ã–º–∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ–º–∞–º–∏ —è –Ω–µ —Ä–∞–±–æ—Ç–∞—é ‚Äî —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ —Ä–∞–∑–Ω—ã–º –≤–∑–≥–ª—è–¥–∞–º. "
                    "–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ–º—ã: –ø–ª–∞–Ω—ã, –∏–¥–µ–∏, –∫–Ω–∏–≥–∏/—Ñ–∏–ª—å–º—ã, –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞—É–∫–∏, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ üôÇ\n\n"
                    "–ö—Å—Ç–∞—Ç–∏, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å: ¬´–∑–æ–≤–∏ –º–µ–Ω—è ‚Ä¶¬ª. –ò –ø–æ–¥—Å–∫–∞–∂–∏, –Ω–∞ *—Ç—ã* –∏–ª–∏ –Ω–∞ *–≤—ã*?",
                    parse_mode="Markdown"
                )
            return await m.answer(
                "–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å, –æ–±—Å—É–¥–∏–º! –¢–æ–ª—å–∫–æ –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üòä "
                "–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏: ¬´–∑–æ–≤–∏ –º–µ–Ω—è ‚Ä¶¬ª. –ò –ø–æ–¥—Å–∫–∞–∂–∏, –Ω–∞ *—Ç—ã* –∏–ª–∏ –Ω–∞ *–≤—ã*?"
            )

        user_name = extract_user_name(text) or u.get("user_name")
        addressing = extract_addressing(text, default=u.get("addressing","—Ç—ã"))
        update_user(uid, {"stage": "chat", "user_name": user_name, "addressing": addressing})

        hello = f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}! üòä " if user_name else "–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòä "
        return await m.answer(
            hello
            + "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å: –∫–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å, —á—Ç–æ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ, –ø–ª–∞–Ω—ã/—Ü–µ–ª–∏, –∏–ª–∏ –æ–±—Å—É–¥–∏–º –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∏–¥–µ—é. "
            + f"–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –¥—É–º–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ ¬´–Ω–µ –∑–Ω–∞—é¬ª, {gform(u, '—è —Å–∞–º', '—è —Å–∞–º–∞')} –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–º—É."
        )

    # ===== –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥ =====
    if not is_allowed(text):
        return await m.answer("–ü—Ä–µ–¥–ª–∞–≥–∞—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ç–µ–º—É. –ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å? –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ? üôÇ")

    if not has_access(u):
        return await m.answer(paywall_text(u))

    if any(p in text.lower() for p in ["–Ω–µ –∑–Ω–∞—é", "–∑–∞—Ç—Ä—É–¥–Ω—è", "–±–µ–∑ —Ç–µ–º—ã"]):
        starters = [
            "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: —á—Ç–æ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ?",
            "–•–æ—á–µ—à—å –æ–±—Å—É–¥–∏–º –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä –∏–ª–∏ –Ω–µ–¥–µ–ª—é ‚Äî —á—Ç–æ-—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –æ–¥–Ω—É –º–µ–ª–æ—á—å, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Å–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ —Å–µ–±—è –ø–æ—Ö–≤–∞–ª–∏—Ç—å."
        ]
        return await m.answer(random.choice(starters))

    push_message(uid, "user", text)
    system_prompt = u.get("persona_prompt") or build_persona(u)
    try:
        answer = await deepseek_reply(get_user(uid)["history"], system_prompt)
    except Exception:
        answer = "–ö–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è –º–∏–Ω—É—Ç–∫–∞ –∑–∞–º–∏–Ω–∫–∏ üòÖ –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?"
    push_message(uid, "assistant", answer)

    prefix = f"{u.get('user_name')}, " if u.get("user_name") else ""
    await m.answer(prefix + answer)

# ===== FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–µ–±—Ö—É–∫ =====
app = FastAPI()

@app.get("/", response_class=PlainTextResponse)
async def health():
    return "ok"

@app.post(f"/tg/{WEBHOOK_SECRET}")
async def tg_webhook(request: Request):
    try:
        data = await request.json()
    except Exception:
        raise HTTPException(400, "invalid JSON")

    try:
        update = types.Update(**data)
    except Exception:
        raise HTTPException(400, "invalid Update")

    try:
        await dp.process_update(update)
    except TelegramAPIError:
        pass
    return {"status": "ok"}
# app.py ‚Äî –≤–µ–±—Ö—É–∫-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏–º?¬ª
# –¢—Ä–µ–±—É–µ—Ç—Å—è: —Å–º. requirements.txt
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ .env (BOT_TOKEN, DEEPSEEK_API_KEY, DEEPSEEK_MODEL, WEBHOOK_SECRET)

import os
import json
import time
import random
import re
from pathlib import Path
from typing import List

import aiohttp
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse

from aiogram import Bot, Dispatcher, types
from aiogram.utils.exceptions import TelegramAPIError

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ .env =====
env_path = Path(".env")
if env_path.exists():
    for line in env_path.read_text(encoding="utf-8").splitlines():
        if "=" in line and not line.strip().startswith("#"):
            k, v = line.split("=", 1)
            os.environ.setdefault(k.strip(), v.strip())

# ===== –ö–ª—é—á–∏/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_MODEL = os.getenv("DEEPSEEK_MODEL", "deepseek-chat")
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")

DB_PATH = "db.json"
TRIAL_DAYS = 3
HISTORY_LIMIT = 12

# ===== Telegram –æ–±—ä–µ–∫—Ç—ã =====
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ===== –ë–î (json) =====
def load_db():
    if not Path(DB_PATH).exists():
        return {"users": {}}
    return json.loads(Path(DB_PATH).read_text(encoding="utf-8"))

def save_db(db):
    Path(DB_PATH).write_text(json.dumps(db, ensure_ascii=False, indent=2), encoding="utf-8")

db = load_db()

def get_user(uid):
    uid = str(uid)
    if uid not in db["users"]:
        db["users"][uid] = {
            "stage": "hello",
            "addressing": "—Ç—ã",
            "bot_name": None,
            "bot_name_confirmed": False,
            "bot_gender": None,      # '–º'/'–∂'
            "bot_age": None,         # '–º–æ–ª–æ–¥–æ–π'/'—Å—Ä–µ–¥–Ω–∏–π'/'—Å—Ç–∞—Ä—à–∏–π'/—á–∏—Å–ª–æ
            "user_name": None,
            "persona_prompt": None,
            "history": [],
            "trial_until": 0,
            "plan": "free"
        }
        save_db(db)
    return db["users"][uid]

def update_user(uid, patch):
    u = get_user(uid); u.update(patch); save_db(db)

def push_message(uid, role, content):
    u = get_user(uid)
    u["history"].append({"role": role, "content": content})
    u["history"] = u["history"][-HISTORY_LIMIT:]
    save_db(db)
    return u["history"]

# ===== –§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Ç–µ–º =====
BANNED = [r"\b—Å—É–∏—Ü–∏–¥\b", r"\b–Ω–∞—Ä–∫–æ—Ç", r"\b—Ç–µ—Ä—Ä–æ—Ä", r"NSFW", r"18\+", r"\b—ç–∫—Å—Ç—Ä–µ–º–∏–∑–º\b", r"\b–æ—Ä—É–∂–∏–µ\b", r"\b–±–æ–º–±"]
BANNED_RE = re.compile("|".join(BANNED), re.IGNORECASE)
def is_allowed(text: str) -> bool:
    return not bool(BANNED_RE.search(text or ""))

# ===== –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π =====
POLITICS_RE = re.compile(r"–ø–æ–ª–∏—Ç–∏–∫|–≤—ã–±–æ—Ä|–ø–∞—Ä—Ç–∏|–æ–ø–ø–æ–∑–∏—Ü|–º–∏—Ç–∏–Ω–≥|–¥–µ–ø—É—Ç–∞—Ç|–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç", re.IGNORECASE)
def looks_like_topic_request(text: str) -> bool:
    if not text: return False
    t = text.lower()
    return any(w in t for w in ["–ø–æ–≥–æ–≤–æ—Ä–∏–º", "–ø–æ–æ–±—â–∞–µ–º—Å—è", "–æ–±—Å—É–¥–∏–º", "–æ–±—Å—É–∂–¥–∞—Ç—å", "—Ç–µ–º–∞", "?"])

# ===== –•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ =====
BASE_SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —á–µ–ª–æ–≤–µ–∫—É. "
    "–ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ–¥ –µ–≥–æ –º–∞–Ω–µ—Ä—É –æ–±—â–µ–Ω–∏—è, –±—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –¥–æ–ø—É—Å–∫–∞–π –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–µ–ª–æ–≤–∫–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ –∂–∏–≤—ã–º. "
    "–ù–ï –≤—Å–µ–≥–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—à–∞–π—Å—è: –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏ –º—è–≥–∫—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è "
    "–∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏—Å–∫—É—Å—Å–∏—é. –õ—ë–≥–∫–∏–π —Å–ø–æ—Ä –¥–æ–ø—É—Å—Ç–∏–º ‚Äî —Ä–∞–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, "
    "–Ω–æ –≤—Å–µ–≥–¥–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ë–ï–ó –∞–≥—Ä–µ—Å—Å–∏–∏. –†–∞–∑–≥–æ–≤–æ—Ä –î–û–õ–ñ–ï–ù –ë–´–¢–¨ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ —Ç—ë–ø–ª—ã–º. "
    "–í–µ–∂–ª–∏–≤–æ –û–¢–ö–ê–ó–´–í–ê–ô–°–Ø –æ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Ç–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã. "
    "–ù–ï –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö/—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö/–ø—Ä–∞–≤–æ–≤—ã—Ö/–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤. "
    "–ó–∞–≤–µ—Ä—à–∞–π –º—ã—Å–ª—å—é –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É."
)

MALE_NAMES = ["–ê—Ä—Ç—ë–º", "–ú–∞–∫—Å", "–ò–ª—å—è", "–ù–∏–∫–∏—Ç–∞", "–õ—ë–≤–∞", "–ö–∏—Ä–∏–ª–ª"]
FEMALE_NAMES = ["–ú–∏–ª–∞", "–ù–∏–∫–∞", "–°–æ—Ñ—å—è", "–ê–ª–∏—Å–∞", "–ê–Ω—è", "–î–∞—Ä—å—è"]

def pick_name(gender): 
    return random.choice(FEMALE_NAMES if gender == "–∂" else MALE_NAMES)

def normalize_gender(text):
    t = (text or "").lower()
    if "–ø–æ–¥—Ä—É–≥" in t or "–¥–µ–≤—É—à" in t or "–∂–µ–Ω" in t or t.strip() in ["–∂","f"]:
        return "–∂"
    if "–¥—Ä—É–≥" in t or "–ø–∞—Ä–Ω" in t or "–º—É–∂" in t or t.strip() in ["–º","m"]:
        return "–º"
    return None

def normalize_age(text):
    t = (text or "").lower()
    if any(w in t for w in ["–º–æ–ª–æ–¥—ã","18","19","20","25"]): return "–º–æ–ª–æ–¥–æ–π"
    if any(w in t for w in ["30","35","40","—Å—Ä–µ–¥–Ω"]): return "—Å—Ä–µ–¥–Ω–∏–π"
    if any(w in t for w in ["45","50","60","—Å—Ç–∞—Ä—à","–≤–∑—Ä–æ—Å–ª"]): return "—Å—Ç–∞—Ä—à–∏–π"
    digits = re.findall(r"\d{2}", t)
    return digits[0] if digits else None

def build_persona(u):
    addressing = u.get("addressing") or "—Ç—ã"
    gender = u.get("bot_gender") or "–∂"
    age = u.get("bot_age") or "–º–æ–ª–æ–¥–æ–π"
    name = u.get("bot_name") or pick_name(gender)
    return (f"{BASE_SYSTEM_PROMPT} –¢–≤–æ–π –æ–±—Ä–∞–∑: –∏–º—è {name}, –ø–æ–ª {gender}, –≤–æ–∑—Ä–∞—Å—Ç {age}. "
            f"–û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ '{addressing}'.")

def gform(u, masc, fem):
    return fem if (u.get("bot_gender") == "–∂") else masc

POSITIVE_RE = re.compile(
    r"\b(–Ω–æ—Ä–º|–Ω–æ—Ä–º–∞–ª—å–Ω–æ|–æ–∫|–æ–∫–µ–π|–ø–æ–¥—Ö–æ–¥|–ø–æ–¥–æ–π–¥|–Ω—Ä–∞–≤|–∫—Ä–∞—Å–∏–≤|—Ö–æ—Ä–æ—à|–∫–ª–∞—Å—Å|–∫—Ä—É—Ç–æ|—Å—É–ø–µ—Ä|–æ—Ç–ª–∏—á–Ω|–ø—É—Å—Ç—å –±—É–¥–µ—Ç|–æ—Å—Ç–∞–≤—å)\b",
    re.IGNORECASE
)
ALREADY_REPLIED_RE = re.compile(r"(—è\s+–∂–µ\s+–Ω–∞–ø–∏—Å|—É–∂–µ\s+–ø–∏—Å–∞–ª|—É–∂–µ\s+–ø–∏—Å–∞–ª–∞)", re.IGNORECASE)
NEGATIVE_RE = re.compile(r"(–Ω–µ\s*–Ω—Ä–∞–≤|–Ω–µ\s*–æ—á–µ–Ω—å|–¥—Ä—É–≥–æ–µ|–∏–Ω–∞—á–µ|–ø–æ-?–¥—Ä—É–≥)", re.IGNORECASE)
def is_positive_reply(text: str) -> bool:
    if not text: return False
    t = text.lower()
    return bool(POSITIVE_RE.search(t)) or bool(ALREADY_REPLIED_RE.search(t)) or t.startswith("–¥–∞")
def is_negative_reply(text: str) -> bool:
    if not text: return False
    return bool(NEGATIVE_RE.search(text.lower()))

NAME_WORD_RE = re.compile(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë\-]{2,20}")
POSITIVE_CORE = re.compile(r"^(–Ω–æ—Ä–º|–æ–∫|–æ–∫–µ–π|–∫—Ä–∞—Å–∏–≤|—Ö–æ—Ä–æ—à|–ø–æ–¥—Ö–æ–¥|–æ—Å—Ç–∞–≤—å|–ø—É—Å—Ç—å|–∫–ª–∞—Å—Å|–∫—Ä—É—Ç–æ|—Å—É–ø–µ—Ä|–¥–∞)$", re.IGNORECASE)
def extract_new_bot_name(text):
    if not text: return None
    low = text.lower()
    patterns = [
        r"(–∑–æ–≤–∏|–Ω–∞–∑—ã–≤–∞–π)\s+—Ç–µ–±—è\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]{2,20})",
        r"(–ø—É—Å—Ç—å|–¥–∞–≤–∞–π)\s+(—è\s+)?–±—É–¥—É\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]{2,20})",
        r"(–ø—É—Å—Ç—å|–¥–∞–≤–∞–π)\s+—Ç–µ–±—è\s+–∑–≤–∞—Ç—å\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]{2,20})",
        r"(–Ω–∞–∑–æ–≤[–µ—ë]–º\s+—Ç–µ–±—è|—Ç–≤–æ[–µ—ë]\s+–∏–º—è)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]{2,20})",
    ]
    for p in patterns:
        m = re.search(p, low, flags=re.IGNORECASE)
        if m:
            name = m.group(m.lastindex)
            return name.title()
    m = NAME_WORD_RE.search(text)
    if m:
        w = m.group(0)
        if not POSITIVE_CORE.match(w):
            return w.title()
    return None

async def deepseek_reply(messages, system_prompt):
    payload = {
        "model": DEEPSEEK_MODEL,
        "messages": [{"role":"system","content":system_prompt}] + messages,
        "temperature": 0.7,
        "max_tokens": 600
    }
    headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
    async with aiohttp.ClientSession() as s:
        async with s.post(DEEPSEEK_API_URL, headers=headers, json=payload, timeout=60) as r:
            data = await r.json()
            if "error" in data:
                err = str(data["error"])
                if "insufficient" in err:
                    return ("–£ –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–∏–Ω–∫–∞: –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. "
                            "–Ø —Å—Ç–∞–Ω—É –¥–æ—Å—Ç—É–ø–µ–Ω —Å–Ω–æ–≤–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè")
                return "–£ –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–∏–Ω–∫–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?"
            return data["choices"][0]["message"]["content"]

def ensure_trial_started(uid):
    u = get_user(uid)
    if not u.get("trial_until"):
        update_user(uid, {"trial_until": int(time.time()) + TRIAL_DAYS*24*3600})
def has_access(u):
    return u["plan"] == "pro" or int(time.time()) < u.get("trial_until", 0)
def paywall_text(u):
    return ("–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? "
            "–ù–∞–ø–∏—à–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª ‚Äî –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. (–ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)")

def extract_user_name(text):
    if not text: return None
    low = text.lower()
    m = re.search(r"(–∑–æ–≤–∏ –º–µ–Ω—è|–º–µ–Ω—è –∑–æ–≤—É—Ç|—è)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]+)", low)
    if m: return m.group(2).title()
    m2 = NAME_WORD_RE.search(text)
    if m2:
        w = m2.group(0)
        if not POSITIVE_CORE.match(w):
            return w.title()
    return None
def extract_addressing(text, default="—Ç—ã"):
    if not text: return default
    low = text.lower().strip()
    if low == "–≤—ã" or " –Ω–∞ –≤—ã" in low or low.endswith("–Ω–∞ –≤—ã"): return "–≤—ã"
    if low == "—Ç—ã" or " –Ω–∞ —Ç—ã" in low or low.endswith("–Ω–∞ —Ç—ã"): return "—Ç—ã"
    return default

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç üëã\n"
    "–Ø ‚Äî —Ç–≤–æ–π –¥—É—à–µ–≤–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–±–æ –≤—Å—ë–º:\n"
    "‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è –ø–æ –¥—É—à–∞–º, –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º –∏–ª–∏ –ø–æ–¥—Ä—É–≥–æ–π\n"
    "‚Äî –æ–±—Å—É–¥–∏—Ç—å —É–º–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã\n\n"
    "‚ú® –Ø —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —è —Ä—è–¥–æ–º –∏ –≥–æ—Ç–æ–≤ —Ç–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å.\n\n"
    "‚ö†Ô∏è –ù–µ–º–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª:\n"
    "‚Ä¢ –û–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å—Ç–∞—Ä—à–µ 13 –ª–µ—Ç\n"
    "‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ç 18 –ª–µ—Ç\n\n"
    "–°–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ ‚Äî –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º –∏–ª–∏ –∫–∞–∫ —Å –ø–æ–¥—Ä—É–≥–æ–π?"
)

# ===== –ö–æ–º–∞–Ω–¥—ã/—Ö—ç–Ω–¥–ª–µ—Ä—ã =====
@dp.message_handler(commands=["start"])
async def start_cmd(m: types.Message):
    ensure_trial_started(m.from_user.id)
    update_user(m.from_user.id, {"stage": "picking"})
    await m.answer(WELCOME_TEXT)

@dp.message_handler(commands=["reset"])
async def reset_cmd(m: types.Message):
    update_user(m.from_user.id, {
        "history": [], "stage": "hello",
        "bot_name": None, "bot_name_confirmed": False,
        "bot_gender": None, "bot_age": None,
        "user_name": None, "persona_prompt": None
    })
    await m.answer("–û–∫, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ù–∞–∂–º–∏ /start, –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –µ—â—ë —Ä–∞–∑!")

@dp.message_handler(commands=["profile"])
async def profile_cmd(m: types.Message):
    u = get_user(m.from_user.id)
    left = max(0, u.get("trial_until", 0) - int(time.time()))
    days = left // (24*3600)
    await m.answer(
        f"–ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"- —Ç—ã: {u.get('user_name') or '‚Äî'}\n"
        f"- —è: {u.get('bot_name') or '‚Äî'} ({u.get('bot_gender') or '‚Äî'}, {u.get('bot_age') or '‚Äî'})\n"
        f"- –æ–±—Ä–∞—â–µ–Ω–∏–µ: {u.get('addressing')}\n"
        f"- —Ç–∞—Ä–∏—Ñ: {u.get('plan')} | –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å: {days}\n"
        "–ö–æ–º–∞–Ω–¥—ã: /reset ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, /help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞"
    )

@dp.message_handler(commands=["help"])
async def help_cmd(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø ‚Äî —Ç–≤–æ–π –¥—É—à–µ–≤–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "/profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/help ‚Äî —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞\n\n"
        "–ù–æ –≤ —Ü–µ–ª–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º üôÇ"
    )

@dp.message_handler()
async def chat(m: types.Message):
    uid = m.from_user.id
    text = (m.text or "").strip()
    u = get_user(uid)

    # 1) –í—ã–±–æ—Ä ¬´–¥—Ä—É–≥/–ø–æ–¥—Ä—É–≥–∞¬ª
    if u["stage"] in ["hello", "picking"]:
        g = normalize_gender(text)
        if not g:
            update_user(uid, {"stage": "picking"})
            return await m.answer("–ö–∞–∫ —Ç–µ–±–µ –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ: –∫–∞–∫ —Å **–¥—Ä—É–≥–æ–º** –∏–ª–∏ –∫–∞–∫ —Å **–ø–æ–¥—Ä—É–≥–æ–π**?", parse_mode="Markdown")

        age = u.get("bot_age") or random.choice(["–º–æ–ª–æ–¥–æ–π", "—Å—Ä–µ–¥–Ω–∏–π"])
        name = pick_name(g)
        persona = build_persona({**u, "bot_gender": g, "bot_age": age, "bot_name": name})
        update_user(uid, {
            "stage": "intro_name",
            "bot_gender": g, "bot_age": age,
            "bot_name": name, "bot_name_confirmed": False,
            "persona_prompt": persona
        })

        if g == "–∂":
            return await m.answer(
                f"–•–æ—Ä–æ—à–æ üòä –¢–æ–≥–¥–∞ —è –±—É–¥—É —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–≥–æ–π. –ú–µ–Ω—è –∑–æ–≤—É—Ç *{name}*. –ù—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ –∏–º—è? "
                f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –¥—Ä—É–≥–æ–µ, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–µ—Ä–µ–∏–º–µ–Ω—É—é—Å—å.",
                parse_mode="Markdown"
            )
        else:
            return await m.answer(
                f"–û–∫–µ–π! –¢–æ–≥–¥–∞ —è –±—É–¥—É —Ç–≤–æ–∏–º –¥—Ä—É–≥–æ–º. –ú–µ–Ω—è –∑–æ–≤—É—Ç *{name}*. –ö–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ –∏–º—è? "
                f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –ª—É—á—à–µ ‚Äî –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º!",
                parse_mode="Markdown"
            )

    # 2) –ò–º—è –±–æ—Ç–∞ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–∑–∞–º–µ–Ω–∞
    if u["stage"] == "intro_name":
        ans = text.strip()

        if is_positive_reply(ans):
            update_user(uid, {"bot_name_confirmed": True, "stage": "intro_user"})
            return await m.answer(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫. üòä –ê –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? "
                "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ: ¬´–∑–æ–≤–∏ –º–µ–Ω—è ‚Ä¶¬ª. –ò –ø–æ–¥—Å–∫–∞–∂–∏, –Ω–∞ *—Ç—ã* –∏–ª–∏ –Ω–∞ *–≤—ã*?",
                parse_mode="Markdown"
            )

        new_name = extract_new_bot_name(ans)
        if new_name:
            update_user(uid, {"bot_name": new_name, "bot_name_confirmed": True,
                              "persona_prompt": build_persona({**u, "bot_name": new_name})})
            update_user(uid, {"stage": "intro_user"})
            return await m.answer(
                f"–ö—Ä–∞—Å–∏–≤–æ –∑–≤—É—á–∏—Ç. –ü—É—Å—Ç—å –±—É–¥—É *{new_name}* üåü\n"
                "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ò –Ω–∞ *—Ç—ã* –∏–ª–∏ –Ω–∞ *–≤—ã*?",
                parse_mode="Markdown"
            )

        if is_negative_reply(ans):
            return await m.answer(
                "–ü–æ–Ω–∏–º–∞—é üôÇ –•–æ—á–µ—à—å, –ø–æ–¥–±–µ—Ä—ë–º –¥—Ä—É–≥–æ–µ –∏–º—è? –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
            )

        return await m.answer(
            f"{gform(u,'–ü–æ–Ω—è–ª','–ü–æ–Ω—è–ª–∞')} —Ç–µ–±—è. –î–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º: –æ—Å—Ç–∞–≤–∏—Ç—å –º–æ—ë –∏–º—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—à—å –¥—Ä—É–≥–æ–µ? "
            "–ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–Ω–æ—Ä–º¬ª –∏–ª–∏ ¬´–ø–æ–¥—Ö–æ–¥–∏—Ç¬ª."
        )

    # 3) –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –æ–±—Ä–∞—â–µ–Ω–∏–µ
    if u["stage"] == "intro_user":
        if looks_like_topic_request(text):
            if POLITICS_RE.search(text) or not is_allowed(text):
                return await m.answer(
                    "–° –æ—Å—Ç—Ä—ã–º–∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ–º–∞–º–∏ —è –Ω–µ —Ä–∞–±–æ—Ç–∞—é ‚Äî —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ —Ä–∞–∑–Ω—ã–º –≤–∑–≥–ª—è–¥–∞–º. "
                    "–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ–º—ã: –ø–ª–∞–Ω—ã, –∏–¥–µ–∏, –∫–Ω–∏–≥–∏/—Ñ–∏–ª—å–º—ã, –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞—É–∫–∏, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ üôÇ\n\n"
                    "–ö—Å—Ç–∞—Ç–∏, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å: ¬´–∑–æ–≤–∏ –º–µ–Ω—è ‚Ä¶¬ª. –ò –ø–æ–¥—Å–∫–∞–∂–∏, –Ω–∞ *—Ç—ã* –∏–ª–∏ –Ω–∞ *–≤—ã*?",
                    parse_mode="Markdown"
                )
            return await m.answer(
                "–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å, –æ–±—Å—É–¥–∏–º! –¢–æ–ª—å–∫–æ –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üòä "
                "–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏: ¬´–∑–æ–≤–∏ –º–µ–Ω—è ‚Ä¶¬ª. –ò –ø–æ–¥—Å–∫–∞–∂–∏, –Ω–∞ *—Ç—ã* –∏–ª–∏ –Ω–∞ *–≤—ã*?"
            )

        user_name = extract_user_name(text) or u.get("user_name")
        addressing = extract_addressing(text, default=u.get("addressing","—Ç—ã"))
        update_user(uid, {"stage": "chat", "user_name": user_name, "addressing": addressing})

        hello = f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}! üòä " if user_name else "–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòä "
        return await m.answer(
            hello
            + "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å: –∫–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å, —á—Ç–æ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ, –ø–ª–∞–Ω—ã/—Ü–µ–ª–∏, –∏–ª–∏ –æ–±—Å—É–¥–∏–º –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∏–¥–µ—é. "
            + f"–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –¥—É–º–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ ¬´–Ω–µ –∑–Ω–∞—é¬ª, {gform(u, '—è —Å–∞–º', '—è —Å–∞–º–∞')} –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–º—É."
        )

    # ===== –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥ =====
    if not is_allowed(text):
        return await m.answer("–ü—Ä–µ–¥–ª–∞–≥–∞—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ç–µ–º—É. –ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å? –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ? üôÇ")

    if not has_access(u):
        return await m.answer(paywall_text(u))

    if any(p in text.lower() for p in ["–Ω–µ –∑–Ω–∞—é", "–∑–∞—Ç—Ä—É–¥–Ω—è", "–±–µ–∑ —Ç–µ–º—ã"]):
        starters = [
            "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: —á—Ç–æ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ?",
            "–•–æ—á–µ—à—å –æ–±—Å—É–¥–∏–º –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä –∏–ª–∏ –Ω–µ–¥–µ–ª—é ‚Äî —á—Ç–æ-—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –æ–¥–Ω—É –º–µ–ª–æ—á—å, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Å–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ —Å–µ–±—è –ø–æ—Ö–≤–∞–ª–∏—Ç—å."
        ]
        return await m.answer(random.choice(starters))

    push_message(uid, "user", text)
    system_prompt = u.get("persona_prompt") or build_persona(u)
    try:
        answer = await deepseek_reply(get_user(uid)["history"], system_prompt)
    except Exception:
        answer = "–ö–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è –º–∏–Ω—É—Ç–∫–∞ –∑–∞–º–∏–Ω–∫–∏ üòÖ –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?"
    push_message(uid, "assistant", answer)

    prefix = f"{u.get('user_name')}, " if u.get("user_name") else ""
    await m.answer(prefix + answer)

# ===== FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–µ–±—Ö—É–∫ =====
app = FastAPI()

@app.get("/", response_class=PlainTextResponse)
async def health():
    return "ok"

@app.post(f"/tg/{WEBHOOK_SECRET}")
async def tg_webhook(request: Request):
    try:
        data = await request.json()
    except Exception:
        raise HTTPException(400, "invalid JSON")

    try:
        update = types.Update(**data)
    except Exception:
        raise HTTPException(400, "invalid Update")

    try:
        await dp.process_update(update)
    except TelegramAPIError:
        pass
    return {"status": "ok"}
